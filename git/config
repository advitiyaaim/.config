#      .-.     .-.     .-.     .-.     .-.     .-.
# `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `
#
# Git config
# https://github.com/rafi/.config
#
[include]
	path = users/current
[core]
	excludesfile = ~/.config/git/ignore
	# Do NOT auto-convert CRLF line endings into LF
	autocrlf = false
	# Do NOT check if converting CRLF is reversible
	safecrlf = false
	# Whitespace detection
	whitespace = trailing-space,space-before-tab
[credential]
	helper = cache --timeout=3600
[init]
	templatedir = ~/.config/git/template
[pager]
	show-branch = true
	status = true
	diff = diff-so-fancy | less --tabs=1,3
	show = diff-so-fancy | less --tabs=1,3
[status]
	submodulesummary = true
	showUntrackedFiles = all
[http]
	# Do NOT verify the SSL certificate when fetching or pushing over HTTPS
#	sslVerify = false
[fetch]
	recurseSubmodules = true
[push]
	# Defines the action git push should take if no refspec is explicitly given:
	# current = Push the current branch to update a branch with the same name on the receiving end
	default = current
	# https://git-scm.com/docs/git-config#git-config-pushfollowTags
	followTags = true
[hooks "ctags"]
	enabled = false
[submodule]
	fetchJobs = 8
[rerere]
	enabled = true
[diff]
	algorithm = patience
	renames = copies
	mnemonicprefix = true
	compactionHeuristic = true
	tool = bc3
[merge]
	tool = bc3
	summary = true
	verbosity = 1
	stat = true
	# Standard diff is two sets of final changes.
	# This introduces the original text before each side's changes.
	# https://git-scm.com/docs/git-config#git-config-mergeconflictStyle
	conflictstyle = diff3
[mergetool]
	prompt = false
	keepBackup = true
	writeToTemp = true
[transfer]
	# https://git-scm.com/docs/git-config#git-config-transferfsckObjects
	# via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
	fsckobjects = true
[gui]
	fontdiff = -family \"Liberation Mono\" -size 9 -weight normal -slant roman -underline 0 -overstrike 0
[web]
	browser = google-chrome-stable
[browser "google-chrome-stable"]
	cmd = "/usr/bin/google-chrome-stable"
[url "git@github.com:"]
	insteadOf = gh:
[color]
	ui = true
	pager = true
	showbranch = true
	diff = auto
	status = auto
	branch = auto
	interactive = auto
[color "branch"]
	plain = yellow
	current = magenta bold
	local = blue bold
	remote = white
	upstream = green bold
[color "diff"]
	plain = normal
	old = red
	new = green
	commit = yellow
	meta = blue
	frag = cyan
	func = yellow bold
	whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "status"]
	header = 243
	added = green bold
	changed = red
	untracked = blue bold
	branch = green bold
	nobranch = red
[pretty]
	default = %C(240)%h%C(reset) -%C(auto)%d%Creset %s %C(242)(%an %ar)
	detailed = %C(cyan)%h %C(red)%ad %C(blue)[%an]%C(magenta)%d %C(white)%s
	shorter = %C(auto)%D %C(240)--%C(242)%gD%N %ad by %C(white)%cn%C(reset)
	vtree = %C(bold blue)%h%C(reset)+%C(242)(%cr)%C(reset)+%C(auto)%D%C(reset)++\n+++       %C(242)%an%C(reset)%C(242):%C(reset) %s
[alias]
	s  = status -sb
	f  = fetch --prune
	c  = commit -v
	cm = commit -vm
	br = branch -v
	st = status
	ck = checkout
	t  = tag --column
	tn = tag -n
	d  = diff
	ds = diff --staged
	dw = diff --color-words
	dh = diff --color-words HEAD
	dp = !git log --pretty=oneline | fzf | cut -d ' ' -f1 | xargs -o git show
	patch = !git --no-pager diff --no-color
	prune = fetch --prune
	stash-all = stash save --include-untracked
	w  = whatchanged --decorate
	wp = whatchanged --decorate -p
	#===============================================
	sm    = submodule
	smu   = submodule foreach git pull origin master
	lcrev = log --reverse --no-merges --stat @{1}..
	lcp   = diff @{1}..
	#===============================================
#	count = shortlog -sn
	post  = !sh -c 'git format-patch --stdout $1 | ix' -
	sync-tags = fetch --prune origin '+refs/tags/*:refs/tags/*'
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'
	ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
	#===============================================
	# Take a snapshot of your current working tree without removing the changes from your tree.
	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	snapshots = !git stash list --grep snapshot
	#===============================================
	tree = log --graph --all --oneline --decorate
	lb   = log --graph --simplify-by-decoration --pretty=shorter --all --notes --date-order --relative-date
	lg   = log --graph --pretty=default --all
	lgd  = log --graph --pretty=default
	lgw  = !sh -c '"while true; do clear; git lg -15; sleep 5; done"'
	#===============================================
	vtreelog = log --all --graph --decorate=short --color --format=vtree
	vtree = !bash -c '"                                                                             \
			while IFS=+ read -r hash time branch message; do                                            \
					timelength=$(echo \"$time\" | gsed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
					timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
					printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"$message\";  \
			done < <(git vtreelog && echo) | less -EFRXS"'
